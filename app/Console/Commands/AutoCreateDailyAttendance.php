<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Filament\Pages\PresensiKelas;
use Carbon\Carbon;

class AutoCreateDailyAttendance extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'attendance:auto-create {tanggal?}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Membuat presensi otomatis untuk tanggal kemarin jika belum ada';

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        // Set locale ke Indonesia
        Carbon::setLocale('id');

        $tanggal = $this->argument('tanggal') ?: Carbon::yesterday()->format('Y-m-d');
        $tanggalFormatted = Carbon::parse($tanggal)->translatedFormat('l, d F Y');

        $this->info("========================================");
        $this->info("      SISTEM PRESENSI OTOMATIS");
        $this->info("========================================");
        $this->info("📅 Memproses tanggal: {$tanggalFormatted}");
        $this->info("🕐 Waktu eksekusi: " . now()->translatedFormat('l, d F Y H:i:s'));
        $this->info("");

        try {
            // Tampilkan informasi hari
            $this->showDayInfo($tanggal);

            // Proses pembuatan presensi
            $result = PresensiKelas::autoGenerateDailyAttendance($tanggal);

            if ($result) {
                $this->displaySuccessMessage($tanggal);
            } else {
                $this->displaySkippedMessage($tanggal);
            }

            // Tampilkan statistik
            $this->showStatistics($tanggal);
        } catch (\Exception $e) {
            $this->displayErrorMessage($e);
            return Command::FAILURE;
        }

        $this->info("");
        $this->info("========================================");
        $this->info("✨ Proses selesai pada: " . now()->translatedFormat('H:i:s'));
        $this->info("========================================");

        return Command::SUCCESS;
    }

    /**
     * Tampilkan informasi hari
     */
    private function showDayInfo($tanggal)
    {
        $carbonDate = Carbon::parse($tanggal);
        $today = Carbon::today();

        $this->info("📊 INFORMASI HARI:");
        $this->info("   • Hari: " . $carbonDate->translatedFormat('l'));
        $this->info("   • Tanggal: " . $carbonDate->translatedFormat('d F Y'));

        if ($carbonDate->isToday()) {
            $this->warn("   • Status: Hari ini");
        } elseif ($carbonDate->isYesterday()) {
            $this->info("   • Status: Kemarin");
        } elseif ($carbonDate->isFuture()) {
            $this->warn("   • Status: Masa depan");
        } else {
            $daysDiff = $today->diffInDays($carbonDate);
            $this->info("   • Status: {$daysDiff} hari yang lalu");
        }

        // Cek apakah weekend
        if ($carbonDate->isWeekend()) {
            if ($carbonDate->isSaturday()) {
                $this->warn("   • Jenis: Hari Sabtu (Akhir Pekan)");
            } else {
                $this->warn("   • Jenis: Hari Minggu (Akhir Pekan)");
            }
        } else {
            $this->info("   • Jenis: Hari Sekolah");
        }

        $this->info("");
    }

    /**
     * Tampilkan pesan sukses
     */
    private function displaySuccessMessage($tanggal)
    {
        $this->info("🎉 BERHASIL MEMBUAT PRESENSI OTOMATIS!");
        $this->info("");
        $this->info("✅ Semua siswa telah dibuatkan presensi");
        $this->info("✅ Siswa dengan izin disetujui sudah ditandai sesuai jenis izin");
        $this->info("✅ Siswa tanpa izin otomatis ditandai 'Hadir'");
        $this->info("✅ Pertemuan ke-X sudah dihitung otomatis");
        $this->info("");

        // Tampilkan detail waktu pemrosesan
        $carbonDate = Carbon::parse($tanggal);
        if ($carbonDate->isYesterday()) {
            $this->comment("💡 Presensi kemarin berhasil dibuat secara otomatis");
        } elseif ($carbonDate->isPast()) {
            $daysDiff = Carbon::today()->diffInDays($carbonDate);
            $this->comment("💡 Presensi {$daysDiff} hari yang lalu berhasil dibuat");
        }
    }

    /**
     * Tampilkan pesan dilewati
     */
    private function displaySkippedMessage($tanggal)
    {
        $carbonDate = Carbon::parse($tanggal);

        $this->warn("⚠️  PRESENSI DILEWATI");
        $this->info("");

        if ($carbonDate->isWeekend()) {
            if ($carbonDate->isSaturday()) {
                $this->warn("📅 Alasan: Hari Sabtu (Akhir Pekan)");
                $this->info("   Tidak ada kegiatan pembelajaran pada hari Sabtu");
            } else {
                $this->warn("📅 Alasan: Hari Minggu (Akhir Pekan)");
                $this->info("   Tidak ada kegiatan pembelajaran pada hari Minggu");
            }
        } else {
            // Cek apakah hari libur
            $holiday = \App\Models\HariLibur::where('tanggal_mulai', '<=', $tanggal)
                ->where(function ($query) use ($tanggal) {
                    $query->whereNull('tanggal_selesai')
                        ->where('tanggal_mulai', '=', $tanggal)
                        ->orWhere('tanggal_selesai', '>=', $tanggal);
                })
                ->first();

            if ($holiday) {
                $this->warn("🏖️  Alasan: Hari Libur Resmi");
                $this->info("   Nama: " . $holiday->nama_hari_libur);
                if ($holiday->keterangan) {
                    $this->info("   Keterangan: " . $holiday->keterangan);
                }

                // Tampilkan rentang tanggal jika libur lebih dari 1 hari
                if ($holiday->tanggal_selesai && !$holiday->tanggal_mulai->equalTo($holiday->tanggal_selesai)) {
                    $this->info("   Periode: " . $holiday->tanggal_mulai->translatedFormat('d F Y') .
                        " - " . $holiday->tanggal_selesai->translatedFormat('d F Y'));
                }
            } else {
                $this->warn("❓ Alasan: Tidak diketahui (kemungkinan sudah ada presensi)");
            }
        }

        $this->info("");
        $this->comment("💡 Tidak ada record presensi yang dibuat untuk tanggal ini");
    }

    /**
     * Tampilkan pesan error
     */
    private function displayErrorMessage($exception)
    {
        $this->error("❌ TERJADI KESALAHAN!");
        $this->error("");
        $this->error("🔍 Detail Error:");
        $this->error("   • Pesan: " . $exception->getMessage());
        $this->error("   • File: " . $exception->getFile());
        $this->error("   • Baris: " . $exception->getLine());
        $this->error("");
        $this->error("📋 Stack Trace:");
        $this->error($exception->getTraceAsString());
        $this->error("");
        $this->warn("💡 Silakan hubungi administrator sistem untuk mengatasi masalah ini.");
    }

    /**
     * Tampilkan statistik presensi
     */
    private function showStatistics($tanggal)
    {
        try {
            $this->info("📈 STATISTIK PRESENSI:");

            // Hitung total kelas aktif
            $totalKelas = \App\Models\WaliKelas::whereHas('kelas')->count();
            $this->info("   • Total Kelas: {$totalKelas} kelas");

            // Hitung total siswa aktif
            $totalSiswa = \App\Models\Siswa::where('is_active', true)->count();
            $this->info("   • Total Siswa Aktif: {$totalSiswa} siswa");

            // Hitung presensi yang dibuat untuk tanggal ini
            $presensiHariIni = \App\Models\Presensi::where('tanggal_presensi', $tanggal)->count();
            $this->info("   • Presensi Tanggal Ini: {$presensiHariIni} record");

            // Hitung berdasarkan status
            $statusStats = \App\Models\Presensi::where('tanggal_presensi', $tanggal)
                ->selectRaw('status, COUNT(*) as jumlah')
                ->groupBy('status')
                ->get();

            if ($statusStats->count() > 0) {
                $this->info("   • Detail Status:");
                foreach ($statusStats as $stat) {
                    $icon = $this->getStatusIcon($stat->status);
                    $this->info("     {$icon} {$stat->status}: {$stat->jumlah} siswa");
                }
            }

            // Hitung siswa dengan izin disetujui
            $siswaIzin = \App\Models\Izin::where('status', 'Disetujui')
                ->where('tanggal_mulai', '<=', $tanggal)
                ->where('tanggal_selesai', '>=', $tanggal)
                ->count();

            if ($siswaIzin > 0) {
                $this->info("   • Siswa Berizin: {$siswaIzin} siswa");
            }

            $this->info("");
        } catch (\Exception $e) {
            $this->warn("⚠️  Tidak dapat menampilkan statistik: " . $e->getMessage());
        }
    }

    /**
     * Dapatkan icon berdasarkan status
     */
    private function getStatusIcon($status)
    {
        return match ($status) {
            'Hadir' => '✅',
            'Izin' => '📋',
            'Sakit' => '🤒',
            'Alpa' => '❌',
            default => '❓'
        };
    }
}
